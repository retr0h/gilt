"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9004],{8373:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>o,default:()=>a,frontMatter:()=>r,metadata:()=>d,toc:()=>t});var s=n(5893),l=n(1151);const r={sidebar_position:3},o="Configuration",d={id:"configuration",title:"Configuration",description:"Gilt uses Viper to load configuation through multpile methods.",source:"@site/docs/configuration.md",sourceDirName:".",slug:"/configuration",permalink:"/gilt/next/configuration",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"Installation",permalink:"/gilt/next/installation"},next:{title:"Usage",permalink:"/gilt/next/usage"}},c={},t=[{value:"Config File",id:"config-file",level:2},{value:"Configuration Options",id:"configuration-options",level:3},{value:"<code>debug</code>",id:"debug",level:4},{value:"<code>parallel</code>",id:"parallel",level:4},{value:"<code>giltDir</code>",id:"giltdir",level:4},{value:"<code>repositories</code>",id:"repositories",level:4},{value:"<code>repositories[].git</code>",id:"repositoriesgit",level:5},{value:"<code>repositories[].version</code>",id:"repositoriesversion",level:5},{value:"<code>repositories[].dstDir</code>",id:"repositoriesdstdir",level:5},{value:"<code>repositories[].sources</code>",id:"repositoriessources",level:5},{value:"<code>repositories[].sources[].src</code>",id:"repositoriessourcessrc",level:6},{value:"<code>repositories[].sources[].dstDir</code>",id:"repositoriessourcesdstdir",level:6},{value:"<code>repositories[].sources[].dstFile</code>",id:"repositoriessourcesdstfile",level:6},{value:"<code>repositories[].commands</code>",id:"repositoriescommands",level:5},{value:"<code>repositories[].commands[].cmd</code>",id:"repositoriescommandscmd",level:6},{value:"<code>repositories[].commands[].args</code>",id:"repositoriescommandsargs",level:6},{value:"Env Vars",id:"env-vars",level:2},{value:"<code>GILT_DEBUG</code>",id:"gilt_debug",level:3},{value:"<code>GILT_PARALLEL</code>",id:"gilt_parallel",level:3},{value:"<code>GILT_GILTFILE</code>",id:"gilt_giltfile",level:3},{value:"<code>GILT_GILTDIR</code>",id:"gilt_giltdir",level:3},{value:"<code>GILT_SKIPCOMMANDS</code>",id:"gilt_skipcommands",level:3},{value:"Command Flags",id:"command-flags",level:2},{value:"<code>-d</code>, <code>--debug</code>",id:"-d---debug",level:3},{value:"<code>-c</code>, <code>--gilt-dir</code>",id:"-c---gilt-dir",level:3},{value:"<code>-f</code>, <code>--gilt-file</code>",id:"-f---gilt-file",level:3},{value:"<code>--no-commands</code>",id:"--no-commands",level:3},{value:"<code>-p</code>, <code>--parallel</code>",id:"-p---parallel",level:3}];function h(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h1,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(i.p,{children:["Gilt uses ",(0,s.jsx)(i.a,{href:"https://github.com/spf13/viper",children:"Viper"})," to load configuation through multpile methods."]}),"\n",(0,s.jsx)(i.h2,{id:"config-file",children:"Config File"}),"\n",(0,s.jsxs)(i.p,{children:["Create the giltfile (",(0,s.jsx)(i.code,{children:"Giltfile.yaml"}),")."]}),"\n",(0,s.jsxs)(i.p,{children:["Clone the specified ",(0,s.jsx)(i.code,{children:"url"}),"@",(0,s.jsx)(i.code,{children:"version"})," to the configurable path ",(0,s.jsx)(i.code,{children:"--gilt-dir"}),".\nExtract the repo the ",(0,s.jsx)(i.code,{children:"dstDir"})," when ",(0,s.jsx)(i.code,{children:"dstDir"})," is provided. Otherwise, copy files\nand/or directories to the desired destinations."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-yaml",children:"---\ngiltDir: ~/.gilt/clone\ndebug: false\nparallel: true\nrepositories:\n  - git: https://github.com/retr0h/ansible-etcd.git\n    version: 77a95b7\n    dstDir: roles/retr0h.ansible-etcd\n  - git: https://github.com/retr0h/ansible-etcd.git\n    version: 1.1\n    dstDir: roles/retr0h.ansible-etcd-tag\n  - git: https://github.com/lorin/openstack-ansible-modules.git\n    version: 2677cc3\n    sources:\n      - src: '*_manage'\n        dstDir: library\n      - src: nova_quota\n        dstDir: library\n      - src: neutron_router\n        dstFile: library/neutron_router.py\n      - src: tests\n        dstDir: tests\n    commands:\n      - cmd: ansible-playbook\n        args:\n          - -i,\n          - playbook.yml\n      - cmd: bash\n        args:\n          - -c\n          - who | grep tty\n"})}),"\n",(0,s.jsx)(i.h3,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,s.jsx)(i.h4,{id:"debug",children:(0,s.jsx)(i.code,{children:"debug"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Type: boolean"}),"\n",(0,s.jsxs)(i.li,{children:["Default: ",(0,s.jsx)(i.code,{children:"false"})]}),"\n",(0,s.jsx)(i.li,{children:"Required: no"}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"Enable / disable debug output"}),"\n",(0,s.jsx)(i.h4,{id:"parallel",children:(0,s.jsx)(i.code,{children:"parallel"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Type: boolean"}),"\n",(0,s.jsxs)(i.li,{children:["Default: ",(0,s.jsx)(i.code,{children:"true"})]}),"\n",(0,s.jsx)(i.li,{children:"Required: no"}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["Enable / disable fetching clones concurrently. The default is to fetch clones in\nparallel, with one fetch per CPU, and a maximum of 8 concurrent processes.\nSetting ",(0,s.jsx)(i.code,{children:"parallel: false"})," will cause Gilt to fetch each clone one-at-a-time."]}),"\n",(0,s.jsx)(i.h4,{id:"giltdir",children:(0,s.jsx)(i.code,{children:"giltDir"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Type: string"}),"\n",(0,s.jsxs)(i.li,{children:["Default: ",(0,s.jsx)(i.code,{children:"~/.gilt/clone"})]}),"\n",(0,s.jsx)(i.li,{children:"Required: no"}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"Specifies the directory to use for storing cached clones for use by Gilt. The\ndirectory will be created if it does not exist."}),"\n",(0,s.jsx)(i.h4,{id:"repositories",children:(0,s.jsx)(i.code,{children:"repositories"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Type: list"}),"\n",(0,s.jsxs)(i.li,{children:["Default: ",(0,s.jsx)(i.code,{children:"[]"})]}),"\n",(0,s.jsx)(i.li,{children:"Required: no"}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"The list of repositories for Gilt to vendor in. They will be processed in the\norder they are defined."}),"\n",(0,s.jsx)(i.h5,{id:"repositoriesgit",children:(0,s.jsx)(i.code,{children:"repositories[].git"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Type: string"}),"\n",(0,s.jsx)(i.li,{children:"Default: None"}),"\n",(0,s.jsx)(i.li,{children:"Required: yes"}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"The Git URL of the repository to clone. Any URL format supported by Git may be\nused."}),"\n",(0,s.jsx)(i.h5,{id:"repositoriesversion",children:(0,s.jsx)(i.code,{children:"repositories[].version"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Type: string"}),"\n",(0,s.jsx)(i.li,{children:"Default: None"}),"\n",(0,s.jsx)(i.li,{children:"Required: yes"}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"The Git commit-ish to use as the source. Any valid branch name, tag name, or\ncommit hash may be used."}),"\n",(0,s.jsx)(i.h5,{id:"repositoriesdstdir",children:(0,s.jsx)(i.code,{children:"repositories[].dstDir"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Type: string"}),"\n",(0,s.jsx)(i.li,{children:"Default: None"}),"\n",(0,s.jsx)(i.li,{children:"Required: no"}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["The local directory to copy files into. All files in the repository will be\ncopied. Relative paths will be installed into the directory where ",(0,s.jsx)(i.code,{children:"gilt"})," was\ninvoked. To copy only a subset of files, use the ",(0,s.jsx)(i.code,{children:"repositories.sources"})," option\ninstead."]}),"\n",(0,s.jsxs)(i.p,{children:["This option cannot be used with ",(0,s.jsx)(i.code,{children:"repositories.sources"}),"."]}),"\n",(0,s.jsx)(i.h5,{id:"repositoriessources",children:(0,s.jsx)(i.code,{children:"repositories[].sources"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Type: list"}),"\n",(0,s.jsxs)(i.li,{children:["Default: ",(0,s.jsx)(i.code,{children:"[]"})]}),"\n",(0,s.jsx)(i.li,{children:"Required: no"}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["A list of subtrees and their targets for Gilt to copy. Relative paths will\nread/write into the directory where ",(0,s.jsx)(i.code,{children:"gilt"})," was invoked."]}),"\n",(0,s.jsxs)(i.p,{children:["This option cannot be used with ",(0,s.jsx)(i.code,{children:"repositories.dstDir"}),"."]}),"\n",(0,s.jsx)(i.h6,{id:"repositoriessourcessrc",children:(0,s.jsx)(i.code,{children:"repositories[].sources[].src"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Type: string"}),"\n",(0,s.jsx)(i.li,{children:"Default: None"}),"\n",(0,s.jsx)(i.li,{children:"Required: yes"}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"The pathname of the source file/directory to copy."}),"\n",(0,s.jsx)(i.h6,{id:"repositoriessourcesdstdir",children:(0,s.jsx)(i.code,{children:"repositories[].sources[].dstDir"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Type: string"}),"\n",(0,s.jsx)(i.li,{children:"Default: None"}),"\n",(0,s.jsx)(i.li,{children:"Required: no"}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["The pathname of the destination directory. If ",(0,s.jsx)(i.code,{children:"src"})," is a file, it will be placed\ninside the named directory. If ",(0,s.jsx)(i.code,{children:"src"})," is a directory, its contents will be copied\ninto the named directory. All parent directories will be created if they do not\nexist."]}),"\n",(0,s.jsxs)(i.p,{children:["This option cannot be used with ",(0,s.jsx)(i.code,{children:"repositories[].sources[].dstFile"}),"."]}),"\n",(0,s.jsx)(i.h6,{id:"repositoriessourcesdstfile",children:(0,s.jsx)(i.code,{children:"repositories[].sources[].dstFile"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Type: string"}),"\n",(0,s.jsx)(i.li,{children:"Default: None"}),"\n",(0,s.jsx)(i.li,{children:"Required: no"}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["The pathname of the destination file. If ",(0,s.jsx)(i.code,{children:"src"})," is a directory, an error is\nthrown. All parent directories will be created if they do not exist, with an\nequivalent set of permissions, i.e., a ",(0,s.jsx)(i.code,{children:"src"})," file with mode ",(0,s.jsx)(i.code,{children:"0640"})," will create\nall nonexistant intermediate directories with mode ",(0,s.jsx)(i.code,{children:"0750"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:["This option cannot be used with ",(0,s.jsx)(i.code,{children:"repositories[].sources[].dstDir"}),"."]}),"\n",(0,s.jsx)(i.h5,{id:"repositoriescommands",children:(0,s.jsx)(i.code,{children:"repositories[].commands"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Type: list"}),"\n",(0,s.jsxs)(i.li,{children:["Default: ",(0,s.jsx)(i.code,{children:"[]"})]}),"\n",(0,s.jsx)(i.li,{children:"Required: no"}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["A list of commands to run after overlaying files. These commands are run in the\nsame directory used to invoke ",(0,s.jsx)(i.code,{children:"gilt"}),". They will be executed in the order they\nare defined, and a non-zero exit status will cause Gilt to abort."]}),"\n",(0,s.jsx)(i.h6,{id:"repositoriescommandscmd",children:(0,s.jsx)(i.code,{children:"repositories[].commands[].cmd"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Type: string"}),"\n",(0,s.jsx)(i.li,{children:"Default: None"}),"\n",(0,s.jsx)(i.li,{children:"Required: yes"}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["The name of the command to run. The current value of ",(0,s.jsx)(i.code,{children:"$PATH"})," will be used to\nfind it. This does ",(0,s.jsx)(i.strong,{children:"NOT"})," invoke a shell, so variable interpolation, output\nredirection, etc., is not supported."]}),"\n",(0,s.jsx)(i.h6,{id:"repositoriescommandsargs",children:(0,s.jsx)(i.code,{children:"repositories[].commands[].args"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Type: list of strings"}),"\n",(0,s.jsxs)(i.li,{children:["Default: ",(0,s.jsx)(i.code,{children:"[]"})]}),"\n",(0,s.jsx)(i.li,{children:"Required: no"}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["Any and all arguments to the given command. This does ",(0,s.jsx)(i.strong,{children:"NOT"})," invoke a shell, so\nvariable interpolation, output redirection, etc. is not supported. Similarly,\narguments are not split on spaces, so each argument must be a separate list\nentry."]}),"\n",(0,s.jsx)(i.h2,{id:"env-vars",children:"Env Vars"}),"\n",(0,s.jsx)(i.p,{children:"The config file can be overriden/defined through env vars."}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"GILT_GILTFILE=Giltfile.yaml \\\nGILT_GILTDIR=~/.gilt/clone \\\nGILT_DEBUG=false \\\nGILT_PARALLEL=false \\\ngilt overlay\n"})}),"\n",(0,s.jsx)(i.h3,{id:"gilt_debug",children:(0,s.jsx)(i.code,{children:"GILT_DEBUG"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Default: ",(0,s.jsx)(i.code,{children:"false"})]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"Enable/disable debug output."}),"\n",(0,s.jsx)(i.h3,{id:"gilt_parallel",children:(0,s.jsx)(i.code,{children:"GILT_PARALLEL"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Default: ",(0,s.jsx)(i.code,{children:"true"})]}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["Enable / disable fetching clones concurrently. The default is to fetch clones in\nparallel, with one fetch per CPU, and a maximum of 8 concurrent processes.\nSetting ",(0,s.jsx)(i.code,{children:"GIT_PARALLEL=false"})," will cause Gilt to fetch each clone one-at-a-time."]}),"\n",(0,s.jsx)(i.h3,{id:"gilt_giltfile",children:(0,s.jsx)(i.code,{children:"GILT_GILTFILE"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Default: ",(0,s.jsx)(i.code,{children:"./Giltfile.yaml"})]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"Configuration file to use."}),"\n",(0,s.jsx)(i.h3,{id:"gilt_giltdir",children:(0,s.jsx)(i.code,{children:"GILT_GILTDIR"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Default: ",(0,s.jsx)(i.code,{children:"~/.gilt/clone"})]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"Specifies the directory to use for storing cached clones for use by Gilt. The\ndirectory will be created if it does not exist."}),"\n",(0,s.jsx)(i.h3,{id:"gilt_skipcommands",children:(0,s.jsx)(i.code,{children:"GILT_SKIPCOMMANDS"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Default: ",(0,s.jsx)(i.code,{children:"false"})]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"If set, Gilt will skip running any post-commands when overlaying files. This can\nbe useful when debugging."}),"\n",(0,s.jsx)(i.h2,{id:"command-flags",children:"Command Flags"}),"\n",(0,s.jsx)(i.p,{children:"The config file and/or env vars can be overriden/defined through cli flags."}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"gilt \\\n  --gilt-file=Giltfile.yaml \\\n  --gilt-dir=~/.gilt/clone \\\n  --debug \\\n  --parallel=false \\\n  overlay\n"})}),"\n",(0,s.jsxs)(i.h3,{id:"-d---debug",children:[(0,s.jsx)(i.code,{children:"-d"}),", ",(0,s.jsx)(i.code,{children:"--debug"})]}),"\n",(0,s.jsx)(i.p,{children:"Enable debug output."}),"\n",(0,s.jsxs)(i.h3,{id:"-c---gilt-dir",children:[(0,s.jsx)(i.code,{children:"-c"}),", ",(0,s.jsx)(i.code,{children:"--gilt-dir"})]}),"\n",(0,s.jsxs)(i.p,{children:["Path to Gilt's clone dir. (default ",(0,s.jsx)(i.code,{children:"~/.gilt/clone"}),")"]}),"\n",(0,s.jsxs)(i.h3,{id:"-f---gilt-file",children:[(0,s.jsx)(i.code,{children:"-f"}),", ",(0,s.jsx)(i.code,{children:"--gilt-file"})]}),"\n",(0,s.jsxs)(i.p,{children:["Path to config file. (default ",(0,s.jsx)(i.code,{children:"./Giltfile.yaml"}),")"]}),"\n",(0,s.jsx)(i.h3,{id:"--no-commands",children:(0,s.jsx)(i.code,{children:"--no-commands"})}),"\n",(0,s.jsx)(i.p,{children:"If set, Gilt will skip running any post-commands when overlaying files. This can\nbe useful when debugging."}),"\n",(0,s.jsxs)(i.h3,{id:"-p---parallel",children:[(0,s.jsx)(i.code,{children:"-p"}),", ",(0,s.jsx)(i.code,{children:"--parallel"})]}),"\n",(0,s.jsxs)(i.p,{children:["Enable / disable fetching clones concurrently. The default is to fetch clones in\nparallel, with one fetch per CPU, and a maximum of 8 concurrent processes.\nSetting ",(0,s.jsx)(i.code,{children:"--parallel=false"})," will cause Gilt to fetch each clone one-at-a-time."]})]})}function a(e={}){const{wrapper:i}={...(0,l.a)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},1151:(e,i,n)=>{n.d(i,{Z:()=>d,a:()=>o});var s=n(7294);const l={},r=s.createContext(l);function o(e){const i=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),s.createElement(r.Provider,{value:i},e.children)}}}]);