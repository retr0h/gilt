// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/retr0h/go-gilt/pkg/config"
)

// MockRepositoryManager is a mock of RepositoryManager interface.
type MockRepositoryManager struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryManagerMockRecorder
}

// MockRepositoryManagerMockRecorder is the mock recorder for MockRepositoryManager.
type MockRepositoryManagerMockRecorder struct {
	mock *MockRepositoryManager
}

// NewMockRepositoryManager creates a new mock instance.
func NewMockRepositoryManager(ctrl *gomock.Controller) *MockRepositoryManager {
	mock := &MockRepositoryManager{ctrl: ctrl}
	mock.recorder = &MockRepositoryManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryManager) EXPECT() *MockRepositoryManagerMockRecorder {
	return m.recorder
}

// CheckoutIndex mocks base method.
func (m *MockRepositoryManager) CheckoutIndex(config config.Repository, cloneDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckoutIndex", config, cloneDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckoutIndex indicates an expected call of CheckoutIndex.
func (mr *MockRepositoryManagerMockRecorder) CheckoutIndex(config, cloneDir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckoutIndex", reflect.TypeOf((*MockRepositoryManager)(nil).CheckoutIndex), config, cloneDir)
}

// Clone mocks base method.
func (m *MockRepositoryManager) Clone(config config.Repository, cloneDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", config, cloneDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockRepositoryManagerMockRecorder) Clone(config, cloneDir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockRepositoryManager)(nil).Clone), config, cloneDir)
}

// CopySources mocks base method.
func (m *MockRepositoryManager) CopySources(config config.Repository, cloneDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopySources", config, cloneDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopySources indicates an expected call of CopySources.
func (mr *MockRepositoryManagerMockRecorder) CopySources(config, cloneDir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopySources", reflect.TypeOf((*MockRepositoryManager)(nil).CopySources), config, cloneDir)
}
