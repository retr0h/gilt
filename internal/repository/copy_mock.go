// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/types.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCopyManager is a mock of CopyManager interface.
type MockCopyManager struct {
	ctrl     *gomock.Controller
	recorder *MockCopyManagerMockRecorder
}

// MockCopyManagerMockRecorder is the mock recorder for MockCopyManager.
type MockCopyManagerMockRecorder struct {
	mock *MockCopyManager
}

// NewMockCopyManager creates a new mock instance.
func NewMockCopyManager(ctrl *gomock.Controller) *MockCopyManager {
	mock := &MockCopyManager{ctrl: ctrl}
	mock.recorder = &MockCopyManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCopyManager) EXPECT() *MockCopyManagerMockRecorder {
	return m.recorder
}

// CopyDir mocks base method.
func (m *MockCopyManager) CopyDir(src, dst string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyDir", src, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyDir indicates an expected call of CopyDir.
func (mr *MockCopyManagerMockRecorder) CopyDir(src, dst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDir", reflect.TypeOf((*MockCopyManager)(nil).CopyDir), src, dst)
}

// CopyFile mocks base method.
func (m *MockCopyManager) CopyFile(src, dst string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFile", src, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFile indicates an expected call of CopyFile.
func (mr *MockCopyManagerMockRecorder) CopyFile(src, dst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFile", reflect.TypeOf((*MockCopyManager)(nil).CopyFile), src, dst)
}
