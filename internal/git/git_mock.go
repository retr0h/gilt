// Code generated by MockGen. DO NOT EDIT.
// Source: internal/git.go

// Package git is a generated GoMock package.
package git

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGitManager is a mock of GitManager interface.
type MockGitManager struct {
	ctrl     *gomock.Controller
	recorder *MockGitManagerMockRecorder
}

// Worktree implements internal.GitManager.
func (*MockGitManager) Worktree(cloneDir string, version string, dstDir string) error {
	panic("unimplemented")
}

// MockGitManagerMockRecorder is the mock recorder for MockGitManager.
type MockGitManagerMockRecorder struct {
	mock *MockGitManager
}

// NewMockGitManager creates a new mock instance.
func NewMockGitManager(ctrl *gomock.Controller) *MockGitManager {
	mock := &MockGitManager{ctrl: ctrl}
	mock.recorder = &MockGitManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitManager) EXPECT() *MockGitManagerMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockGitManager) Clone(gitURL, cloneDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", gitURL, cloneDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockGitManagerMockRecorder) Clone(gitURL, cloneDir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockGitManager)(nil).Clone), gitURL, cloneDir)
}

// CloneByTag mocks base method.
func (m *MockGitManager) CloneByTag(gitURL, gitTag, cloneDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneByTag", gitURL, gitTag, cloneDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloneByTag indicates an expected call of CloneByTag.
func (mr *MockGitManagerMockRecorder) CloneByTag(gitURL, gitTag, cloneDir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneByTag", reflect.TypeOf((*MockGitManager)(nil).CloneByTag), gitURL, gitTag, cloneDir)
}

// Reset mocks base method.
func (m *MockGitManager) Reset(cloneDir, gitSHA string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", cloneDir, gitSHA)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockGitManagerMockRecorder) Reset(cloneDir, gitSHA interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockGitManager)(nil).Reset), cloneDir, gitSHA)
}
